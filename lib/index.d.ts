// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../http

declare module '@inpassor/functions' {
    export * from '@inpassor/functions/animate-max-height-to-zero';
    export * from '@inpassor/functions/aws4';
    export * from '@inpassor/functions/call';
    export * from '@inpassor/functions/capitalize';
    export * from '@inpassor/functions/formatters';
    export * from '@inpassor/functions/get-class-name';
    export * from '@inpassor/functions/get-error-message';
    export * from '@inpassor/functions/get-height';
    export * from '@inpassor/functions/get-property';
    export * from '@inpassor/functions/get-query-params';
    export * from '@inpassor/functions/get-random-char';
    export * from '@inpassor/functions/has-lowercase';
    export * from '@inpassor/functions/has-number';
    export * from '@inpassor/functions/has-uppercase';
    export * from '@inpassor/functions/is-empty';
    export * from '@inpassor/functions/is-numeric';
    export * from '@inpassor/functions/load-script-file-async';
    export * from '@inpassor/functions/map-params';
    export * from '@inpassor/functions/set-max-height';
    export * from '@inpassor/functions/set-typing';
    export * from '@inpassor/functions/set-typings';
    export * from '@inpassor/functions/to-float';
    export * from '@inpassor/functions/to-string';
    export * from '@inpassor/functions/trigger-event';
    export * from '@inpassor/functions/trim';
    export * from '@inpassor/functions/wait-for';
    export * from '@inpassor/functions/wait-for-transition-end';
}

declare module '@inpassor/functions/animate-max-height-to-zero' {
    export const animateMaxHeightToZero: (el: HTMLElement, timeout: number) => Promise<any>;
}

declare module '@inpassor/functions/aws4' {
    import { IncomingHttpHeaders } from 'http';
    export interface AWS4AuthHeader {
        credentialScopeRaw?: string;
        credentialScope?: {
            accessKeyId: string;
            dateStamp: string;
            region: string;
            service: string;
            action: string;
        };
        signedHeadersRaw?: string;
        signedHeaders?: string[];
        signature?: string;
    }
    export class AWS4 {
        static algorithm: string;
        static actionName: string;
        static parseAuthorizationHeader(authorizationHeader: string): AWS4AuthHeader;
        static createAuthorizationHeader(accessKeyId: string, regionName: string, serviceName: string, signedHeaders: string, body: string): string;
        static dateToDateStamp(date: Date): string;
        static dateToAmzDate(date: Date): string;
        static getAmzDate(arg?: IncomingHttpHeaders | Date): string;
        static validateAuthorizationHeader(authorizationHeader: string, xAmzDate: string, body: string, accessKeyId: string, regionName: string): boolean;
        static getSignature(stringToSign: string, signatureKey: string): string;
        static getBodyHash(body: string): string;
        static getStringToSign(xAmzDate: string, body: string, accessKeyId: string, dateStamp: string, regionName: string, serviceName: string): string;
        static getSignatureKey(key: string, dateStamp: string, regionName: string, serviceName: string): string;
    }
}

declare module '@inpassor/functions/call' {
    export const call: (functionName: string, thisArg: any, ...args: any[]) => any;
}

declare module '@inpassor/functions/capitalize' {
    export const capitalize: (s: string) => string;
}

declare module '@inpassor/functions/formatters' {
    export const Formatters: {
        stringToBoolean: (value: string) => boolean;
        booleanToString: (value: boolean) => string;
        stringToNumber: (value: any) => number;
        numberToString: (value: number) => string;
        numberToBoolean: (value: number) => boolean;
        booleanToNumber: (value: boolean) => number;
        stringToDate: (value: string) => Date;
        dateToString: (value: Date) => string;
        dateToDateString: (value: Date) => string;
    };
}

declare module '@inpassor/functions/get-class-name' {
    export const getClassName: (context: any) => string;
}

declare module '@inpassor/functions/get-error-message' {
    export const getErrorMessage: (error: any) => string;
}

declare module '@inpassor/functions/get-height' {
    export const getHeight: (el: HTMLElement) => number;
}

declare module '@inpassor/functions/get-property' {
    export const getProperty: (object: any, propertyName: string, properties?: any) => any;
}

declare module '@inpassor/functions/get-query-params' {
    export const getQueryParams: (_href?: string) => {
        [key: string]: any;
    };
}

declare module '@inpassor/functions/get-random-char' {
    export const getRandomChar: () => string;
}

declare module '@inpassor/functions/has-lowercase' {
    export const hasLowercase: (s: string) => boolean;
}

declare module '@inpassor/functions/has-number' {
    export const hasNumber: (s: string) => boolean;
}

declare module '@inpassor/functions/has-uppercase' {
    export const hasUppercase: (s: string) => boolean;
}

declare module '@inpassor/functions/is-empty' {
    export const isEmpty: (o: any) => boolean;
}

declare module '@inpassor/functions/is-numeric' {
    export const isNumeric: (n: any) => boolean;
}

declare module '@inpassor/functions/load-script-file-async' {
    export const loadScriptFileAsync: (src: string) => void;
}

declare module '@inpassor/functions/map-params' {
    export const mapParams: (paramsMap: {
        [key: string]: any;
    }, params: {
        [key: string]: any;
    }) => {
        [key: string]: any;
    };
}

declare module '@inpassor/functions/set-max-height' {
    export const setMaxHeight: (el: HTMLElement, height?: number) => void;
}

declare module '@inpassor/functions/set-typing' {
    export const setTyping: (_value: any) => any;
}

declare module '@inpassor/functions/set-typings' {
    export const setTypings: (obj?: Object) => Object;
}

declare module '@inpassor/functions/to-float' {
    export const toFloat: (value: any) => number;
}

declare module '@inpassor/functions/to-string' {
    export const toString: (params: {
        [param: string]: any;
    }, encode?: boolean, pairDivider?: string, divider?: string, callback?: (key: string, value: any) => any) => string;
}

declare module '@inpassor/functions/trigger-event' {
    export const triggerEvent: (element: any, eventType: string) => void;
}

declare module '@inpassor/functions/trim' {
    export const trim: (str: string, _charlist?: string) => string;
}

declare module '@inpassor/functions/wait-for' {
    export interface WaitForOptions {
        context: any;
        prop: any;
        requiredValue?: any;
        iterationsInterval?: number;
        maxIterations?: number;
    }
    export const waitFor: (options: WaitForOptions) => Promise<null>;
}

declare module '@inpassor/functions/wait-for-transition-end' {
    export const waitForTransitionEnd: (el: HTMLElement | HTMLElement[], transition?: string) => Promise<any>;
}

